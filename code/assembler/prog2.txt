ld r6 001             #nop
add r1 r7             #r1 = 64(8'b01000000)(setup phase starts)
add r1 r1             #r1 = 128(8'b10000000)
add r7 r6             #r7 = 65
add r7 r6             #r7 = 66
sw r5 r7              #mem[66](min MSB) = 8'b11111111
add r7 r6             #r7 = 67
sw r5 r7              #mem[67](min LSB) = 8'b11111111
add r7 r6             #r7 = 68
sw r0 r7              #mem[68](max MSB) = 8'b00000000
add r7 r6             #r7 = 69
sw r0 r7              #mem[69](max LSB) = 8'b00000000
add r7 r6             #r7 = 70
sw r0 r7              #mem[70](i) = 0
add r7 r6             #r7 = 71
sw r0 r7              #mem[71](j) = 0
add r7 r6             #r7 = 72
sw r1 r7              #mem[72] = 128(8'b10000000)
ld r4 111             #r4 = 7
add r4 r6             #r4 = 8
xor r4 r5             #r4 = ~r4
add r4 r6             #r4 = r4+1(-8)
add r7 r4             #r7 = len(n)(setup phase ends)
xor r2 r5             #r2 = ~r2(i loop jump back to here)
add r2 r6             #r2 = r2+1(-i)
add r7 r5             #r7 = len(n)-1
add r7 r5             #r7 = len(n)-2
add r2 r7             #r2 = len(n)-2-i
add r7 r6             #r7 = len(n)-1
add r7 r6             #r7 = len(n)
jmp r2 110            #for i in range(len(n)-1)
ld r2 110             #r2 = 6
add r7 r2             #r7 = 70
lw r2 r7              #r2 = mem[70](i)
ld r3 010             #r3 = 2
add r3 r2             #r3(j) = r2(i)+2
add r7 r6             #r7 = 71
sw r3 r7              #mem[71](j) = r3
ld r0 111             #r0 = 7
xor r0 r5             #r0 = ~r0
add r0 r6             #r0 = r0+1(-r0)
add r7 r0             #r7 = len(n)
xor r3 r5             #r3 = ~r3(j loop jump back to here)
add r3 r6             #r3 = r3+1(-j)
add r3 r7             #r4 = len(n)-j
jmp r3 100            #for j in range(i+2, len(n))
ld r0 111             #r0 = 7
add r7 r0             #r7 = 71
lw r3 r7              #r3 = mem[71](j)
add r3 r6             #r3 = r3+1(j+1)
lw r3 r3              #r3 = n[j+1]
jmp r3 001            #if n[j+1]!=0
ld r0 000             #r0 = 0(LSB carry out=0)
ld r6 001             #nop
jmp r5 000            #if n[j+1]==0
ld r0 001             #r0 = 0(LSB carry out=1)
lw r2 r7              #r2 = mem[70](i)
add r2 r6             #r2 = i+1
lw r2 r2              #r2 = n[i+1]
add r7 r6             #r7 = 71
lw r3 r7              #r3 = mem[71](j)
lw r3 r3              #r3 = n[j]
xor r3 r5             #r3 = ~r3(-n[j] without LSB carry out)
add r3 r0             #r3 = r3+r0(-n[j] with LSB carry out)
add r7 r6             #r7 = 72
add r7 r6             #r7 = 73
sw r3 r7              #mem[73] = r3(-n[j] with LSB carry out)
add r3 r6             #r3 = j+1
add r7 r5             #r7 = 72
lw r1 r7              #r1 = mem[72](8'b10000000)
add r7 r5             #r7 = 71
lw r3 r7              #r3 = mem[71](j)
add r3 r6             #r3 = j+1
lw r3 r3              #r3 = n[j+1]
xor r3 r5             #r3 = ~r3
add r3 r6             #r3 = r3+1(-n[j+1])
add r7 r5             #r7 = 70
ld r0 000             #r0 = 0
add r0 r2             #r0 = r2
rst r0 001            #r0 = r0>>1
add r0 r0             #r0 = r0+r0
xor r0 r5             #r0 = ~r0
add r0 r6             #r0 = r0+1(-{n[i+1][7:1],0})
add r0 r2             #r0 = r0+r2(n[i+1][0])
ld r4 000             #r4 = 0
add r4 r3             #r4 = r3
rst r4 001            #r4 = r4>>1
add r4 r4             #r4 = r4+r4
xor r4 r5             #r4 = ~r4
add r4 r6             #r4 = r4+1(-{-n[j+1][7:1],0})
add r4 r3             #r4 = r4+r3(-n[j+1][0])
add r0 r4             #r0 = r0+r4(n[i+1][0]-n[j+1][0])
rst r0 001            #r0 >>= 1(r0 = last bit carry out)
rst r2 001            #r2 >>= 1
xor r2 r5             #r2 = ~r2
rst r3 001            #r3 >>= 1
xor r3 r5             #r3 = ~r3
pos r2 001            #if n[i+1]<0
xor r2 r5             #r2 = ~r2
xor r2 r1             #r2 = r2^r1({0,r2[7:1]})
jmp r6 000            #else
xor r2 r5             #r2 = ~r2
pos r3 001            #if -n[j+1]<0
xor r3 r5             #r3 = ~r3
xor r3 r1             #r3 = r3^r1({0,r3[7:1]})
jmp r6 000            #else
xor r3 r5             #r3 = ~r3
add r1 r2             #r1 = r1+r2(0,n[i+1][7:1]+last bit carry out)
add r1 r3             #r1 = r1+r3{0,n[i+1][7:1]}+{0,-n[j+1][7:1]+last bit carry out}
rst r1 001            #r1 >>=1
rst r1 001            #r1 >>=1
rst r1 001            #r1 >>=1
rst r1 001            #r1 >>=1
rst r1 001            #r1 >>=1
rst r1 001            #r1 >>=1
rst r1 001            #r1 >>=1(r1 = LSB carry out)
lw r2 r7              #r2 = mem[70](i)
lw r2 r2              #r2 = n[i]
ld r3 011             #r3 = 3
add r7 r3             #r7 = 73
lw r3 r7              #r3 = mem[73](-n[j] with LSB carry out)
add r7 r5             #r7 = 72
add r7 r5             #r7 = 71
add r7 r5             #r7 = 70
add r1 r2             #r1 = r1+r2(LSB carry out+n[i])
add r1 r3             #r1 = r1+r3(LSB carry out+n[i]-n[j])
add r7 r5             #r7 = 69
add r7 r5             #r7 = 68
add r7 r5             #r7 = 67
add r7 r5             #r7 = 66
lw r0 r7              #r0 = mem[66](minMSB)
xor r0 r5             #r0 = ~r0
add r0 r6             #r0 = r0+1(-minMSB)
add r1 r0             #r1 = r0-minMSB
xor r1 r5             #r1 = ~r1
add r1 r6             #r1 = r1+1(minMSB-r0)
pos r1 001            #if r0 < minMSB
sw r0 r7              #mem[66](minMSB) = r0(update minMSB)
add r7 r6             #r7 = 67
sw r4 r7              #mem[67](minLSB) = r4(update minLSB)
add r7 r5             #r7 = 66
ld r1 100             #r1 = 4(if r0 > minMSB)
add r7 r1             #r7 = 70
add r7 r5             #r7 = 69
add r7 r5             #r7 = 68
lw r1 r7              #r1 = mem[68](minMSB)
xor r1 r5             #r1 = ~r1
add r1 r6             #r1 = r1+1(-maxMSB)
add r1 r0             #r1 = r0-maxMSB
xor r1 r5             #r1 = ~r1
add r1 r6             #r1 = r1+1(maxMSB-r0)
pos r1 001            #if r0 < maxMSB
sw r0 r7              #mem[68](maxMSB) = r0(update maxMSB)
add r7 r6             #r7 = 69
sw r4 r7              #mem[69](maxLSB) = r4(update maxLSB)
add r7 r5             #r7 = 68
add r7 r6             #r1 = 69
add r7 r1             #r7 = 70
add r7 r6             #r7 = 71
lw r3 r7              #r3 = j
add r3 r6             #j+=1
add r3 r6             #j+=1
sw r3 r7              #mem[71] = j
ld r4 111             #r4 = 7
xor r4 r5             #r4 = ~r4
add r4 r6             #r4 = r4+1(-7)
add r7 r4             #r7 = 64
pos r5 101            #jump back to j for loop
lw r2 r7              #r2 = i
add r2 r6             #i+=1
add r2 r6             #i+=1
sw r2 r7              #mem[70] = i
ld r4 110             #r4 = 6
xor r4 r5             #r4 = ~r4
add r4 r6             #r4 = r4+1(-6)
add r7 r4             #r7 = 64
pos r5 111            #jump back to i for loop
ld r0 000             #r0 = 0
ld r1 000             #r1 = 0
ld r2 000             #r2 = 0
ld r3 000             #r3 = 0
ld r4 000             #r4 = 0