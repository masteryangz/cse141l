ld r6 001             #nop
add r7 r6             #r7 = 65(setup phase starts)
add r7 r6             #r7 = 66
sw r5 r7              #mem[66](min MSB) = 8'b11111111
add r7 r6             #r7 = 67
sw r5 r7              #mem[67](min LSB) = 8'b11111111
add r7 r6             #r7 = 68
sw r0 r7              #mem[68](max MSB) = 8'b00000000
add r7 r6             #r7 = 69
sw r0 r7              #mem[69](max LSB) = 8'b00000000
add r7 r6             #r7 = 70
sw r0 r7              #mem[70](i) = 0
add r7 r6             #r7 = 71
sw r0 r7              #mem[71](j) = 0
add r7 r6             #r7 = 72
sw r0 r7              #mem[72](k) = 0
ld r4 111             #r4 = 7
add r4 r6             #r4 = 8
xor r4 r5             #r4 = ~r4
add r4 r6             #r4 = r4+1(-8)
add r7 r4             #r7 = len(n)(setup phase ends)
xor r2 r5             #r2 = ~r2(i loop jump back to here)
add r2 r6             #r2 = r2+1(-i)
add r7 r5             #r7 = len(n)-1
add r7 r5             #r7 = len(n)-2
add r2 r7             #r2 = len(n)-2-i
add r7 r6             #r7 = len(n)-1
add r7 r6             #r7 = len(n)
jmp r2 110            #for i in range(len(n)-1)
ld r2 110             #r2 = 6
add r7 r2             #r7 = 70
lw r2 r7              #r2 = mem[70](i)
ld r3 010             #r3 = 2
add r3 r2             #r3(j) = r2(i)+2
add r7 r6             #r7 = 71
sw r3 r7              #mem[71](j) = r3
ld r0 111             #r0 = 7
xor r0 r5             #r0 = ~r0
add r0 r6             #r0 = r0+1(-r0)
add r7 r0             #r7 = len(n)
xor r3 r5             #r3 = ~r3(j loop jump back to here)
add r3 r6             #r3 = r3+1(-j)
add r3 r7             #r4 = len(n)-j
jmp r3 100            #for j in range(i+2, len(n))
ld r0 110             #r0 = 6
add r7 r0             #r7 = 70
lw r2 r7              #r2 = mem[70](i)
add r2 r6             #r2 = i+1
lw r2 r2              #r2 = n[i+1]
add r7 r6             #r7 = 71
lw r3 r7              #r3 = mem[71](j)
add r3 r6             #r3 = j+1
lw r3 r3              #r3 = n[j+1]
add r7 r6             #r7 = 72
lw r4 r7              #r4 = mem[72](k)
add r7 r5             #r7 = 71
add r7 r5             #r7 = 70
xor r4 r5             #r4 = ~r4(first k loop jump back to here)
add r4 r6             #r4 = r4+1(-k)
ld r0 111             #r0 = 7
add r0 r6             #r0 = 8
add r4 r0             #r4 = 8-k
jmp r4 010            #for k in range(8)
ld r0 000             #r0 = 0
add r0 r2             #r0 = n[i+1]
rst r0 001            #r0 = r0/2
add r0 r0             #r0 = r0+r0
xor r0 r5             #r0 = ~r0
add r0 r6             #r0 = r0+1(-{n[i+1][15:k+1],0,n[i+1][k:0]})
add r0 r2             #r0 = r0+r2(n[i+1][k])
rst r2 001            #r2 >>= 1
add r7 r6             #r7 = 71
add r7 r6             #r7 = 72
lw r4 r7              #r4 = k
add r4 r6             #k+=1
sw r4 r7              #mem[72] = k
add r7 r5             #r7 = 71
add r7 r5             #r7 = 70
pos r5 011            #jump back to first k loop
pos r1 001            #if n[i]-n[j](MSB)<0
xor r0 r5             #r0 = ~r0
add r0 r6             #r0 = r0+1(-r0)
xor r4 r5             #r4 = ~r4
add r4 r6             #r4 = r4+1(-r4)
add r7 r5             #r7 = 69
add r7 r5             #r7 = 68
add r7 r5             #r7 = 67
add r7 r5             #r7 = 66
lw r1 r7              #r1 = mem[66](minMSB)
xor r1 r5             #r1 = ~r1
add r1 r6             #r1 = r1+1(-minMSB)
add r1 r0             #r1 = r0-minMSB
xor r1 r5             #r1 = ~r1
add r1 r6             #r1 = r1+1(minMSB-r0)
pos r1 001            #if r0 < minMSB
sw r0 r7              #mem[66](minMSB) = r0(update minMSB)
add r7 r6             #r7 = 67
sw r4 r7              #mem[67](minLSB) = r4(update minLSB)
add r7 r5             #r7 = 66
ld r1 100             #r1 = 4(if r0 > minMSB)
add r7 r1             #r7 = 70
add r7 r5             #r7 = 69
add r7 r5             #r7 = 68
lw r1 r7              #r1 = mem[68](minMSB)
xor r1 r5             #r1 = ~r1
add r1 r6             #r1 = r1+1(-maxMSB)
add r1 r0             #r1 = r0-maxMSB
xor r1 r5             #r1 = ~r1
add r1 r6             #r1 = r1+1(maxMSB-r0)
pos r1 001            #if r0 < maxMSB
sw r0 r7              #mem[68](maxMSB) = r0(update maxMSB)
add r7 r6             #r7 = 69
sw r4 r7              #mem[69](maxLSB) = r4(update maxLSB)
add r7 r5             #r7 = 68
ld r6 001             #nop(if r4 < maxMSB)
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
add r7 r6             #r1 = 69
add r7 r1             #r7 = 70
add r7 r6             #r7 = 71
lw r3 r7              #r3 = j
add r3 r6             #j+=1
add r3 r6             #j+=1
sw r3 r7              #mem[71] = j
add r7 r5             #r7 = 70
pos r5 101            #jump back to j for loop
lw r2 r7              #r2 = i
add r2 r6             #i+=1
add r2 r6             #i+=1
sw r2 r7              #mem[70] = i
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
ld r6 001             #nop
pos r5 111            #jump back to i for loop
ld r0 000             #r0 = 0
ld r1 000             #r1 = 0
ld r2 000             #r2 = 0
ld r3 000             #r3 = 0
ld r4 000             #r4 = 0
ld r6 001             #nop
ld r6 001             #nop