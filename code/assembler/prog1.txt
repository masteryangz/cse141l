sw r7 r7              #mem[64] = 64
lw r0 r7              #r0 = 64
lw r1 r7              #r1 = 64
sw r2 r7              #max(mem[64]) = 0
rst r0 001            #r0 = 32
rst r0 001            #r0 = 16
add r7 r6             #r7 = 65
sw r0 r7              #min(mem[65]) = 16
add r7 r6             #r7 = 66
sw r2 r7              #mem[66] = 0
add r7 r6             #r7 = 67
sw r1 r7              #mem[67] = 64
add r7 r6             #r7 = 68
sw r5 r7              #mem[68] = -1
add r7 r6             #r7 = 69
sw r6 r7              #mem[69] = 1
add r7 r6             #r7 = 68
add r7 r6             #r7 = 67
add r7 r6             #r7 = 66
add r7 r6             #r7 = 65
add r7 r6             #r7 = 64
lw r0 r7              #r0 = mem[64](0)
lw r1 r7              #r1 = mem[64](0)
lw r3 r7              #r3 = mem[64](0)
add r3 r2             #load r3 with r2(i)
xor r3 r5             #r3 = ~r2
add r3 r6             #r3 = r3+1(-r2)
add r7 r5             #r7 = len(n)-1
add r7 r5             #r7 = len(n)-2
add r7 r5             #r7 = len(n)-3
add r7 r5             #r7 = len(n)-4
add r3 r7             #r3 = len(n)-4-i
add r7 r6             #r7 = len(n)-3
add r7 r6             #r7 = len(n)-2
add r7 r6             #r7 = len(n)-1
add r7 r6             #r7 = len(n)
jmp r3 110            #for i in range(len(n)-1)
add r7 r6             #r7 = len(n)+1
add r7 r6             #r7 = len(n)+2
lw r3 r7              #r3 = mem[66](0)
add r3 r6             #r3 = 1
add r3 r6             #r3 = 2
add r3 r2             #r3(j) = r2(i)+2
lw r4 r7              #r4 = mem[66](0)
add r4 r3             #load r4 with r3(j)
xor r4 r5             #r4 = ~r3
add r4 r6             #r4 = r4+1(-r3)
add r7 r5             #r7 = len(n)+1
add r7 r5             #r7 = len(n)
add r7 r5             #r7 = len(n)-1
add r7 r5             #r7 = len(n)-2
add r4 r7             #r4 = len(n)-2-j
add r7 r6             #r7 = len(n)-1
add r7 r6             #r7 = len(n)
jmp r4 100            #for j in range(i+2, len(n))
lw r4 r2              #load mem[i] into r4
lw r0 r3              #load mem[j] into r0
xor r4 r0             #x(r4) = n[i]^n[j]
add r7 r6             #r7 = len(n)+1
add r7 r6             #r7 = len(n)+2
lw r0 r7              #r0(k) = mem[66](0)
add r7 r6             #r7 = len(n)+3
lw r1 r7              #r1 = mem[67](64)
add r7 r6             #r7 = len(n)+4
add r7 r6             #r7 = len(n)+5
add r7 r6             #r7 = len(n)+6
sw r2 r7              #mem[70] = r2(i)
add r7 r6             #r7 = len(n)+7
sw r3 r7              #mem[71] = r3(j)
rst r1 001            #r1 = 32
rst r1 001            #r1 = 16
add r7 r5             #r7 = len(n)+6
add r7 r5             #r7 = len(n)+5
add r7 r5             #r7 = len(n)+4
add r7 r5             #r7 = len(n)+3
add r7 r5             #r7 = len(n)+2
lw r2 r7              #r2 = mem[66](0)
lw r3 r7              #r3 = mem[66](0)
add r7 r5             #r7 = len(n)+1
add r7 r5             #r7 = len(n)
add r2 r0             #load r0(k) into r2
xor r2 r5             #r2 = ~r0
add r2 r6             #r2 = r2+1(-r0)
add r2 r1             #for k in range(r1(16))
add r7 r6             #r7 = len(n)+1
add r7 r6             #r7 = len(n)+2
lw 
jmp r5 011            #jump back to k loop
ld r3 111             #r3 = 7
add r7 r3             #r7 = len(n)+7
lw r3 r7              #r3 = j
add r3 r6             #j+=1
add r3 r6             #j+=1
sw r3 r7              #mem[71] = j
ld r3 111             #r3 = 7
xor r3 r5             #r3 = ~r3
add r3 r6             #r3 = -7
add r7 r3             #r7 = len(n)
jmp r5 101            #jump back to j for loop
ld r2 110             #r2 = 6
add r7 r2             #r7 = len(n)+6
lw r2 r7              #r2 = i
add r2 r6             #i+=1
add r2 r6             #i+=1
sw r2 r7              #mem[70] = i
ld r2 110             #r2 = 6
xor r2 r5             #r2 = ~r2
add r2 r6             #r2 = -6
add r7 r2             #r7 = len(n)
jmp r5 111            #jump back to i for loop