111111111 //mem[64] = 64
110000111 //r0 = 64
110001111 //r1 = 64
111010111 //max(mem[64]) = 0
001000001 //r0 = 32
001000001 //r0 = 16
010111110 //r7 = 65
111000111 //min(mem[65]) = 16
010111110 //r7 = 66
111001111 //mem[66] = 64
010111110 //r7 = 67
111010111 //mem[67] = r2(i=0)
010111110 //r7 = 68
111011111 //mem[68] = r3(j=0)
010111110 //r7 = 69
111100111 //mem[69] = r4(k=0)
010111101 //r7 = 68
010111101 //r7 = 67
010111101 //r7 = 66
010111101 //r7 = 65
010111101 //r7 = 64
100010101 //r2 = ~r2(i loop jump back to here)
010010110 //r2 = r2+1(-i)
010111101 //r7 = len(n)-1
010111101 //r7 = len(n)-2
010111101 //r7 = len(n)-3
010111101 //r7 = len(n)-4
010010111 //r2 = len(n)-4-i
010111110 //r7 = len(n)-3
010111110 //r7 = len(n)-2
010111110 //r7 = len(n)-1
010111110 //r7 = len(n)
101010110 //for i in range(len(n)-3)
010111110 //r7 = len(n)+1
010111110 //r7 = len(n)+2
010111110 //r7 = len(n)+3
110010111 //r2 = mem[67](i)
010111101 //r7 = len(n)+2
010111101 //r7 = len(n)+1
010111101 //r7 = len(n)
000011010 //r3 = 2
010011010 //r3(j) = r2(i)+2
100011101 //r3 = ~r3(j loop jump back to here)
010011110 //r3 = r3+1(-j)
010111101 //r7 = len(n)-1
010111101 //r7 = len(n)-2
010011111 //r4 = len(n)-2-j
010111110 //r7 = len(n)-1
010111110 //r7 = len(n)
101011100 //for j in range(i+2, len(n))
010111110 //r7 = len(n)+1
010111110 //r7 = len(n)+2
010111110 //r7 = len(n)+3
110010111 //r2 = mem[67](i)
010111110 //r7 = len(n)+4
110011111 //r3 = mem[68](j)
110100010 //load mem[i] into r4
110000011 //load mem[j] into r0
100000100 //x(r0) = n[i]^n[j]
010111110 //r7 = len(n)+5
110100111 //r4 = mem[69](k)
010111110 //r7 = len(n)+6
111000111 //mem[70] = x(n[i]^n[j])
000011110 //r3 = 6
100011101 //r3 = ~r3
010011110 //r3 = -6
010111011 //r7 = len(n)
000011000 //r3 = 0(setBits)
100100101 //r4(k) = ~r4
010100110 //r4 = r4+1(-r4)
000001111 //r1 = 7
010100001 //r4 = 7 - k
101100010 //for k in range(16)(first k loop)
000010110 //r2 = 6
010111010 //r7 = len(n)+6
110010111 //r2 = mem[70](x=n[i]^n[j])
001010001 //r2 = r2/2
010010010 //r2 = r2+r2
100010101 //r2 = ~r2
010010110 //r2 = r2+1(-{x[15:1],0})
010010000 //r2 = r0+r2(x[0])
010011010 //setBits += x[0]
001000001 //r0(x) >>= 1
000010110 //r2 = 6
010111010 //r7 = len(n)+6
111000111 //update x in mem
100010101 //r2 = ~r2
010010110 //r2 = r2+1(-6)
010111010 //r7 = len(n)
101101011 //jump back to first k loop
110100010 //load mem[i] into r4
110000011 //load mem[j] into r0
100000100 //x(r0) = n[i]^n[j]
000100101 //r4 = 5
010111110 //r7 = len(n)+5
110100111 //r4 = mem[69](k)
010111110 //r7 = len(n)+6
111000111 //mem[70] = x(n[i]^n[j])
000011110 //r3 = 6
100011101 //r3 = ~r3
010011110 //r3 = -6
010111011 //r7 = len(n)
100100101 //r4(k) = ~r4
010100110 //r4 = r4+1(-r4)
000001111 //r1 = 7
010100001 //r4 = 7 - k
101100010 //for k in range(16)(second k loop)
000010110 //r2 = 6
010111010 //r7 = len(n)+6
110010111 //r2 = mem[70](x=n[i]^n[j])
001010001 //r2 = r2/2
010010010 //r2 = r2+r2
100010101 //r2 = ~r2
010010110 //r2 = r2+1(-{x[15:1],0})
010010000 //r2 = r0+r2(x[0])
010011010 //setBits += x[0]
001000001 //r0(x) >>= 1
000010110 //r2 = 6
010111010 //r7 = len(n)+6
111000111 //update x in mem
100010101 //r2 = ~r2
010010110 //r2 = r2+1(-6)
010111010 //r7 = len(n)
101101011 //jump back to second k loop
010111110 //r7 = len(n)+1
110000111 //r0 = mem[65](max)
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-max)
010000011 //r0 = setBits-max
100000101 //r0 = ~r0
010000110 //r0 = r0+1(max-setBits)
011000000 //if setBits > max
111011111 //mem[65](max) = setBits
010111101 //r7 = len(n)
110000111 //r0 = mem[64](min)
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-min)
010000011 //r0 = setBits-min
011000000 //if setBits < min
111011111 //mem[64](min) = setBits
000011100 //r3 = 4
010111011 //r7 = len(n)+4
110011111 //r3 = j
010011110 //j+=1
010011110 //j+=1
111011111 //mem[68] = j
010111101 //r7 = len(n)+3
010111101 //r7 = len(n)+2
010111101 //r7 = len(n)+1
010111101 //r7 = len(n)
101101101 //jump back to j for loop
000010011 //r2 = 3
010111010 //r7 = len(n)+3
110010111 //r2 = i
010010110 //i+=1
010010110 //i+=1
111010111 //mem[67] = i
010111101 //r7 = len(n)+2
010111101 //r7 = len(n)+1
010111101 //r7 = len(n)
101101111 //jump back to i for loop
