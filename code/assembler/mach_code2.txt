000110001 //nop
000000111 //r0 = 7(setup phase starts)
010000000 //r0 = 14
010000101 //r0 = 13
010000101 //r0 = 12
010000101 //r0 = 11
010000111 //r0 = 75
010001111 //r1 = 64
010001001 //r1 = 8'b10000000
111001000 //mem[75] = 8'b10000000(setup phase ends)
100010101 //r2 = ~r2(i loop jump back to here)
010010110 //r2 = r2+1(-i)
010111101 //r7 = len(n)-1
010111101 //r7 = len(n)-2
010010111 //r2 = len(n)-2-i
010111110 //r7 = len(n)-1
010111110 //r7 = len(n)
101010110 //for i in range(len(n)-1)
000010110 //r2 = 6
010111010 //r7 = 70
110010111 //r2 = mem[70](i)
000011010 //r3 = 2
010011010 //r3(j) = r2(i)+2
010111110 //r7 = 71
111011111 //mem[71](j) = r3
000000111 //r0 = 7
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-r0)
010111000 //r7 = len(n)
100011101 //r3 = ~r3(j loop jump back to here)
010011110 //r3 = r3+1(-j)
010011111 //r3 = len(n)-j
101011100 //for j in range(i+2, len(n))
000000111 //r0 = 7
010111000 //r7 = 71
110011111 //r3 = mem[71](j)
010011110 //r3 = j+1
010011110 //r3 = j+1
110011011 //r3 = n[j+1]
101011001 //if n[j+1] != 0
000000000 //r0 = 0(-n[j+1] carry out)
100011101 //r3 = ~r3
010011110 //r3 = r3+1(-n[j+1])
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
011101000 //else if n[j+1] == 0
000000001 //r0 = 1(-n[j+1] carry out)
110011111 //r3 = j
110011011 //r3 = n[j]
100011101 //r3 = ~r3
010011000 //r3 = -n[j] with -n[j+1] carry out
010111110 //r7 = 72
111011111 //mem[72] = -n[j] with -n[j+1] carry out
111011111 //mem[72] = -n[j] with -n[j+1] carry out
010111101 //r7 = 71
110011111 //r3 = j
110011111 //r3 = j
010011110 //r3 = j+1
110011011 //r3 = n[j+1]
010111101 //r7 = 70
110010111 //r2 = i
010010110 //r2 = i+1
110010111 //r2 = i
010010110 //r2 = i+1
110010010 //r2 = n[i+1]
000000000 //r0 = 0
010000010 //r0 = r2
001000001 //r0 = r0>>1
010000000 //r0 = r0+r0
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-{n[i+1][7:1],0})
010000010 //r0 = r0+r2(n[i+1][0])
000100000 //r4 = 0
010100011 //r4 = r3
001100001 //r4 = r4>>1
010100100 //r4 = r4+r4
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-{-n[j+1][7:1],0})
010100011 //r4 = r4+r3(-n[j+1][0])
010000100 //r0 = r0+r4(n[i+1][0]-n[j+1][0])
001000001 //r0 >>= 1(r0 = n[i+1]-n[j+1] last bit carry out)
000100000 //r4 = 0
010100010 //r4 = n[i+1]
010100011 //r4 = n[i+1]-n[j+1]
010111110 //r7 = 71
010111110 //r7 = 72
010111110 //r7 = 73
111100111 //r4 = mem[73]
001010001 //r2 >>= 1
001011001 //r3 >>= 1
010000010 //r0 = r0+r2({0,n[i+1][7:1]}+last bit carry out)
010000011 //r0 = r0+r3({0,n[i+1][7:1]}+{0,-n[j+1][7:1]}+last bit carry out)
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1(r0 = n[i+1]-n[j+1] carry out)
010111101 //r7 = 72
110011111 //r3 = -n[j] with -n[j+1] carry out
010111101 //r7 = 71
010111101 //r7 = 70
110010111 //r2 = i
110010010 //r2 = n[i]
000100000 //r4 = 0
010100000 //r4 = n[i+1]-n[j+1] carry out
010100010 //r4 = n[i] with n[i+1]-n[j+1] carry out
010100011 //r4 = n[i]-n[j] with n[i+1]-n[j+1] carry out
000100000 //r4 = 0
010100000 //r4 = n[i+1]-n[j+1] carry out
010100010 //r4 = n[i] with n[i+1]-n[j+1] carry out
010100011 //r4 = n[i]-n[j] with n[i+1]-n[j+1] carry out
010111110 //r7 = 71
010111110 //r7 = 72
010111110 //r7 = 73
010111110 //r7 = 74
111100111 //mem[74] = n[i+1]-n[j+1] carry out+n[i]-n[j]
000001000 //r1 = 0
010001010 //r1 = r2
001001001 //r1 = r1>>1
010001001 //r1 = r1+r1
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-{n[i][7:1],0})
010001010 //r1 = r1+r2(n[i][0])
000100000 //r4 = 0
010100011 //r4 = r3
001100001 //r4 = r4>>1
010100100 //r4 = r4+r4
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-{-n[j][7:1],0})
010100011 //r4 = r4+r3(-n[j][0])
010001100 //r1 = r1+r4(n[i][0]-n[j][0])
010000001 //r0 = r0+r1(n[i][0]-n[j][0]+(n[i+1]-n[j+1]) carry out)
001000001 //r0 >>= 1(r0 = n[i]-n[j] last bit carry out)
000001000 //r1 = 0
010111110 //r7 = 75
011010000 //if n[i] >= 0{}
011101000 //if n[i] < 0{
110001111 //r1 = 8'b10000000}
001010001 //r2 >>= 1
010010001 //r2 = arithmetic right shift by 1
000001000 //r1 = 0
011011000 //if n[j] >= 0{}
011101000 //if n[j] < 0{
110001111 //r1 = 8'b10000000}
001011001 //r3 >>= 1
010011001 //r3 = arithmetic right shift by 1
010000010 //r0 = r0+r2({n[i][7:1]}+last bit carry out)
010000011 //r0 = r0+r3({n[i][7:1]}+{-n[j][7:1]}+last bit carry out)
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1(r0 = n[i]-n[j] carry out)
010111101 //r7 = 74
110010111 //r2 = n[i]-n[j] with carry out
010111101 //r7 = 73
110011111 //r3 = n[i+1]-n[j+1]
101000010 //if n[i]-n[j] carry out == 1{
101011001 //if n[i+1]-n[j+1] != 0{
000001000 //r1 = 0(-(n[i+1]-n[j+1]) carry out)
100011101 //r3 = ~r3
010011110 //r3 = r3+1(abs(n[i+1]-n[j+1]))
111011111 //mem[73] = abs(n[i+1]-n[j+1])
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
011101000 //}else if n[i+1]-n[j+1] == 0{
000001001 //r1 = 1(-(n[i+1]-n[j+1]) carry out)}
010111110 //r7 = 74
100010101 //r2 = ~r2
010010001 //r2 = abs(n[i]-n[j]) with -(n[i+1]-n[j+1]) carry out
111010111 //mem[74] = abs(n[i]-n[j]) with -(n[i+1]-n[j+1]) carry out}
010111101 //r7 = 73
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
110010111 //r2 = abs(n[i+1]-n[j+1])
000001110 //r1 = 6
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-6)
010111001 //r7 = 67
110001111 //r1 = mem[67](minLSB)
000100111 //r4 = 7
010100111 //r4 = 74
010100110 //r4 = 75
010100110 //r4 = 76(k)
000011111 //r3 = 7
010011110 //r3 = 8
010011011 //r3 = 16
010011100 //r3 = 76+16 = 92
000110001 //nop(first k loop jump back to here(store abs(n[i+1]-n[j+1]) and minLSB))
000110001 //nop
000110001 //nop
000110001 //nop
000000000 //r0 = 0
010000011 //r0 = 92
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-92)
010000100 //r0 = k-92
101000010 //for k in range(16)(store abs(n[i+1]-n[j+1]) and minLSB){
000000000 //r0 = 0
010000010 //r0 = abs(n[i]+n[j])
001000001 //r0 = r0/2
010000000 //r0 = r0+r0
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-{abs(n[i]-n[j])[7:1],0})
010000010 //r0 = r0+r2(abs(n[i]-n[j])[0])
111000100 //mem[k] = abs(n[i]-n[j])[0]
001010001 //r2 >>= 1
010100110 //k+=1
000000000 //r0 = 0
010000001 //r0 = minMSB
001000001 //r0 = r0/2
010000000 //r0 = r0+r0
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-{minMSB[7:1],0})
010000001 //r0 = r0+r1(minMSB[0])
111000100 //mem[k] = minMSB[0]
001001001 //r1 >>= 1
010100110 //k+=1
011101011 //jump back to first k loop}
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
010111101 //r7 = 66
110001111 //r1 = minMSB
000110001 //nop(second k loop jump back to here(store abs(n[i]-n[j]) and minMSB))
000110001 //nop
000000111 //r0 = 7
010000110 //r0 = 8
010000000 //r0 = 16
010000011 //r0 = 92+16 = 108
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-108)
010000100 //r0 = k-108
101000010 //for k in range(16)(store abs(n[i]-n[j]) and minMSB){
000000000 //r0 = 0
010000010 //r0 = abs(n[i]+n[j])
001000001 //r0 = r0/2
010000000 //r0 = r0+r0
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-{abs(n[i]-n[j])[7:1],0})
010000010 //r0 = r0+r2(abs(n[i]-n[j])[0])
111000100 //mem[k] = abs(n[i]-n[j])[0]
001010001 //r2 >>= 1
010100110 //k+=1
000000000 //r0 = 0
010000001 //r0 = minMSB
001000001 //r0 = r0/2
010000000 //r0 = r0+r0
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-{minMSB[7:1],0})
010000001 //r0 = r0+r1(minMSB[0])
111000100 //mem[k] = minMSB[0]
001001001 //r1 >>= 1
010100110 //k+=1
011101011 //jump back to second k loop}
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000001111 //r1 = 7
010001110 //r1 = 8
010001001 //r1 = 16
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-16)
000000111 //r0 = 7
010000110 //r0 = 8
010111000 //r7 = 74
110010001 //r2 = abs(n[i]-n[j])
100000101 //r0 = ~r0
010000110 //r0 = -8
010111110 //r7 = 66
010001100 //r1 = 92
000110001 //nop(third k loop jump back to here)
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000000000 //r0 = 0
010000001 //r0 = 92
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-92)
010000100 //r0 = k-92
101000010 //for k in range(16)(third k loop(compare abs(n[i]-n[j]) and minMSB)){
000000000 //r0 = 0
000011000 //r3 = 0
010100101 //k-=1
110000100 //r0 = mem[k](minMSB[7])
010100101 //k-=1
110011100 //r3 = mem[k](abs(n[i]-n[j])[7])
101000001 //if (minMSB[7]) == 1{
101011000 //if abs(n[i]-n[j][7]) == 1{continue
011101001 //}else if abs(n[i+1]-n[j+1])[7]==0{
011101001 //update then break
011101001 //}else if minMSB[7] == 0{
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
101011000 //if abs(n[i])+n[j][7] == 1{
011101000 //break}
011101011 //jump back to third k loop}}}
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
011101001 //break
111010111 //mem[66] = abs(n[i+1]-n[j+1])(update minMSB)
000010111 //r3 = 7
010111010 //r7 = 73
110011111 //r3 = abs(n[i+1]-n[j+1])
100010101 //r2 = ~r2
010010110 //r2 = -7
010111010 //r7 = 66
010111110 //r7 = 67
111011111 //mem[67] = abs(n[i]-n[j])(update minLSB)
000110001 //nop
000001111 //r1 = 7
010001110 //r1 = 8
010001001 //r1 = 16
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-16)
000000111 //r0 = 7
010000110 //r0 = 8
010111000 //r7 = 74
110010001 //r2 = abs(n[i]-n[j])
100000101 //r0 = ~r0
010000110 //r0 = -8
010111110 //r7 = 66
010001100 //r1 = 92
000110001 //nop(fourth k loop jump back to here)
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000000000 //r0 = 0
010000001 //r0 = 92
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-92)
010000100 //r0 = k-92
101000010 //for k in range(16)(fourth k loop(compare abs(n[i+1]-n[j+1]) and minLSB)){
000000000 //r0 = 0
000011000 //r3 = 0
010100101 //k-=1
110000100 //r0 = mem[k](minMSB[7])
010100101 //k-=1
110011100 //r3 = mem[k](abs(n[i]-n[j])[7])
101000001 //if (minMSB[7]) == 1{
101011000 //if abs(n[i]-n[j][7]) == 1{continue
011101001 //}else if abs(n[i+1]-n[j+1])[7]==0{
011101001 //update then break
011101001 //}else if minMSB[7] == 0{
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
101011000 //if abs(n[i])+n[j][7] == 1{
011101000 //break}
011101011 //jump back to third k loop}}}
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
011101001 //break
111010111 //mem[66] = abs(n[i+1]-n[j+1])(update minMSB)
000010111 //r3 = 7
010111010 //r7 = 73
110011111 //r3 = abs(n[i+1]-n[j+1])
100010101 //r2 = ~r2
010010110 //r2 = -7
010111010 //r7 = 66
010111110 //r7 = 67
111011111 //mem[67] = abs(n[i]-n[j])(update minLSB)
000110001 //nop
000011100 //r3 = 4
010111011 //r7 = 71
110011111 //r3 = j
010011110 //j+=1
010011110 //j+=1
111011111 //mem[71] = j
000100111 //r4 = 7
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-7)
010111100 //r7 = 64
011101101 //jump back to j for loop
110010111 //r2 = i
010010110 //i+=1
010010110 //i+=1
111010111 //mem[70] = i
000100110 //r4 = 6
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-6)
010111100 //r7 = 64
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
011101111 //jump back to i for loop
000000000 //r0 = 0
000001000 //r1 = 0
000010000 //r2 = 0
000011000 //r3 = 0
000100000 //r4 = 0
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
