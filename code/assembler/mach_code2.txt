000110001 //nop
010111110 //r7 = 65(setup phase starts)
010111110 //r7 = 66
111101111 //mem[66](min MSB) = 8'b11111111
010111110 //r7 = 67
111101111 //mem[67](min LSB) = 8'b11111111
010111110 //r7 = 68
111000111 //mem[68](max MSB) = 8'b00000000
010111110 //r7 = 69
111000111 //mem[69](max LSB) = 8'b00000000
010111110 //r7 = 70
111000111 //mem[70](i) = 0
010111110 //r7 = 71
111000111 //mem[71](j) = 0
000100111 //r4 = 7
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-7)
010111100 //r7 = len(n)(setup phase ends)
100010101 //r2 = ~r2(i loop jump back to here)
010010110 //r2 = r2+1(-i)
010111101 //r7 = len(n)-1
010111101 //r7 = len(n)-2
010010111 //r2 = len(n)-2-i
010111110 //r7 = len(n)-1
010111110 //r7 = len(n)
101010110 //for i in range(len(n)-1)
000010110 //r2 = 6
010111010 //r7 = 70
110010111 //r2 = mem[70](i)
000011010 //r3 = 2
010011010 //r3(j) = r2(i)+2
010111110 //r7 = 71
111011111 //mem[71](j) = r3
000000111 //r0 = 7
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-r0)
010111000 //r7 = len(n)
100011101 //r3 = ~r3(j loop jump back to here)
010011110 //r3 = r3+1(-j)
010011111 //r4 = len(n)-j
101011100 //for j in range(i+2, len(n))
000000110 //r0 = 6
010111000 //r7 = 70
110010111 //r2 = mem[70](i)
110010010 //r2 = n[i]
010111110 //r7 = 71
110011111 //r3 = mem[71](j)
010111101 //r7 = 70
110011011 //r3 = n[j]
100011101 //r3 = ~r3
010011110 //r3 = r3+1(-r3)
000000000 //r0 = 0
010000010 //r0 = n[i]
010000011 //r0 = n[i]-n[j]
100000101 //r0 = ~r0
010000110 //r0 = r0+1(n[j]-n[i])
110010111 //r2 = mem[70](i)
010111110 //r7 = 71
110011111 //r3 = mem[71](j)
010111101 //r7 = 70
010010110 //r2 = r2+1(i+1)
110010010 //r2 = n[i+1]
010011110 //r3 = r3+1(j+1)
110011011 //r3 = n[j+1]
100011101 //r3 = ~r3
010011110 //r3 = r3+1(-n[j+1])
000100000 //r4 = 0
010100010 //r4 = n[i+1]
010100011 //r4 = n[i+1]-n[j+1]
000001000 //r1 = 0
010001000 //r1 = n[i]-n[j]
100001101 //r1 = ~r1
011001001 //if n[i]-n[j](MSB)<0
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-r0)
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-r4)
010111101 //r7 = 69
010111101 //r7 = 68
010111101 //r7 = 67
010111101 //r7 = 66
110001111 //r1 = mem[66](minMSB)
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-minMSB)
010001000 //r1 = r0-minMSB
100001101 //r1 = ~r1
010001110 //r1 = r1+1(minMSB-r0)
011001001 //if r0 < minMSB
111000111 //mem[66](minMSB) = r0(update minMSB)
010111110 //r7 = 67
111100111 //mem[67](minLSB) = r4(update minLSB)
010111101 //r7 = 66
000001100 //r1 = 4(if r0 > minMSB)
010111001 //r7 = 70
010111101 //r7 = 69
010111101 //r7 = 68
110001111 //r1 = mem[68](minMSB)
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-maxMSB)
010001000 //r1 = r0-maxMSB
100001101 //r1 = ~r1
010001110 //r1 = r1+1(maxMSB-r0)
011001001 //if r0 < maxMSB
111000111 //mem[68](maxMSB) = r0(update maxMSB)
010111110 //r7 = 69
111100111 //mem[69](maxLSB) = r4(update maxLSB)
010111101 //r7 = 68
000110001 //nop(if r4 < maxMSB)
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
010111110 //r1 = 69
010111001 //r7 = 70
010111110 //r7 = 71
110011111 //r3 = j
010011110 //j+=1
010011110 //j+=1
111011111 //mem[71] = j
010111101 //r7 = 70
011101101 //jump back to j for loop
110010111 //r2 = i
010010110 //i+=1
010010110 //i+=1
111010111 //mem[70] = i
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
011101111 //jump back to i for loop
000000000 //r0 = 0
000001000 //r1 = 0
000010000 //r2 = 0
000011000 //r3 = 0
000100000 //r4 = 0
000110001 //nop
000110001 //nop
