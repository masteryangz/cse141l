000110001 //nop
100010101 //r2 = ~r2(i loop jump back to here)
010010110 //r2 = r2+1(-i)
010111101 //r7 = len(n)-1
010111101 //r7 = len(n)-2
010010111 //r2 = len(n)-2-i
010111110 //r7 = len(n)-1
010111110 //r7 = len(n)
101010110 //for i in range(len(n)-1)
000010110 //r2 = 6
010111010 //r7 = 70
110010111 //r2 = mem[70](i)
000011010 //r3 = 2
010011010 //r3(j) = r2(i)+2
010111110 //r7 = 71
111011111 //mem[71](j) = r3
000000111 //r0 = 7
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-r0)
010111000 //r7 = len(n)
100011101 //r3 = ~r3(j loop jump back to here)
010011110 //r3 = r3+1(-j)
010011111 //r3 = len(n)-j
101011100 //for j in range(i+2, len(n))
000000111 //r0 = 7
010111000 //r7 = 71
110011111 //r3 = mem[71](j)
010011110 //r3 = j+1
110011011 //r3 = n[j+1]
100011101 //r3 = ~r3
010011110 //r3 = r3+1(-n[j+1])
101011000 //if -n[j+1] != 0
000000000 //r0 = 0(-n[j+1] carry out)
011101000 //else if -n[j+1] == 0
000000001 //r0 = 1(-n[j+1] carry out)
110011111 //r3 = j
110011011 //r3 = n[j]
100011101 //r3 = ~r3
010011110 //r3 = r3+1(-n[j])
010011000 //r3 = -n[j] with -n[j+1] carry out
010111110 //r7 = 72
111011111 //mem[72] = -n[j] with -n[j+1] carry out
010111101 //r7 = 71
110011111 //r3 = j
010011110 //r3 = j+1
110011011 //r3 = n[j+1]
010111101 //r7 = 70
110010111 //r2 = i
010010110 //r2 = i+1
110010010 //r2 = n[i+1]
000000000 //r0 = 0
010000010 //r0 = r2
001000001 //r0 = r0>>1
010000000 //r0 = r0+r0
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-{n[i+1][7:1],0})
010000010 //r0 = r0+r2(n[i+1][0])
000100000 //r4 = 0
010100011 //r4 = r3
001100001 //r4 = r4>>1
010100100 //r4 = r4+r4
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-{-n[j+1][7:1],0})
010100011 //r4 = r4+r3(-n[j+1][0])
010000100 //r0 = r0+r4(n[i+1][0]-n[j+1][0])
001000001 //r0 >>= 1(r0 = n[i+1]-n[j+1] last bit carry out)
000100000 //r4 = 0
010100010 //r4 = n[i+1]
010100011 //r4 = n[i+1]-n[j+1]
010111110 //r7 = 71
010111110 //r7 = 72
010111110 //r7 = 73
111100111 //r4 = mem[73]
010111110 //r7 = 72
001010001 //r2 >>= 1
001011001 //r3 >>= 1
010000010 //r0 = r0+r2({0,n[i+1][7:1]}+last bit carry out)
010000011 //r0 = r0+r3({0,n[i+1][7:1]}+{0,-n[j+1][7:1]}+last bit carry out)
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1(r0 = n[i+1]-n[j+1] carry out)
110011111 //r3 = -n[j] with -n[j+1] carry out
010111101 //r7 = 71
010111101 //r7 = 70
110010111 //r2 = i
110010010 //r2 = n[i]
000100000 //r4 = 0
010100000 //r4 = n[i+1]-n[j+1] carry out
010100010 //r4 = n[i] with n[i+1]-n[j+1] carry out
010100011 //r4 = n[i]-n[j] with n[i+1]-n[j+1] carry out
010111110 //r7 = 71
010111110 //r7 = 72
010111110 //r7 = 73
010111110 //r7 = 74
111100111 //mem[74] = n[i+1]-n[j+1] carry out+n[i]-n[j]
000001000 //r1 = 0
010001010 //r1 = r2
001001001 //r1 = r1>>1
010001001 //r1 = r1+r1
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-{n[i][7:1],0})
010001010 //r1 = r1+r2(n[i][0])
000100000 //r4 = 0
010100011 //r4 = r3
001100001 //r4 = r4>>1
010100100 //r4 = r4+r4
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-{-n[j][7:1],0})
010100011 //r4 = r4+r3(-n[j][0])
010001100 //r1 = r1+r4(n[i][0]-n[j][0])
010000001 //r0 = r0+r1(n[i][0]-n[j][0]+(n[i+1]-n[j+1]) carry out)
001000001 //r0 >>= 1(r0 = n[i]-n[j] last bit carry out)
001010001 //r2 >>= 1
001011001 //r3 >>= 1
010000010 //r0 = r0+r2({0,n[i][7:1]}+last bit carry out)
010000011 //r0 = r0+r3({0,n[i][7:1]}+{0,-n[j][7:1]}+last bit carry out)
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1(r0 = n[i]-n[j] carry out)
