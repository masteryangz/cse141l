000110001 //nop(setup phase starts)
010001101 //r1 = -1(8'b11111111)
001001001 //r1 = 127(8'b01111111)
010111110 //r7 = 65
010111110 //r7 = 66
111001111 //mem[66](min MSB) = 8'b01111111
010111110 //r7 = 67
111101111 //mem[67](min LSB) = 8'b11111111
010111110 //r7 = 68
111000111 //mem[68](max MSB) = 8'b00000000
010111110 //r7 = 69
111000111 //mem[69](max LSB) = 8'b00000000
010111110 //r7 = 70
111000111 //mem[70](i) = 0
010111110 //r7 = 71
111000111 //mem[71](j) = 0
010111110 //r7 = 72
111000111 //mem[72](-n[j] with -n[j+1] LSB carry out) = 0
010111110 //r7 = 73
111000111 //mem[73](abs(n[i]-n[j])) = 0
000100111 //r4 = 7
010100110 //r4 = 8
010100110 //r4 = 9
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-9)
010111100 //r7 = len(n)(setup phase ends)
100010101 //r2 = ~r2(i loop jump back to here)
010010110 //r2 = r2+1(-i)
010111101 //r7 = len(n)-1
010111101 //r7 = len(n)-2
010010111 //r2 = len(n)-2-i
010111110 //r7 = len(n)-1
010111110 //r7 = len(n)
101010110 //for i in range(len(n)-1)
000010110 //r2 = 6
010111010 //r7 = 70
110010111 //r2 = mem[70](i)
000011010 //r3 = 2
010011010 //r3(j) = r2(i)+2
010111110 //r7 = 71
111011111 //mem[71](j) = r3
000000111 //r0 = 7
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-r0)
010111000 //r7 = len(n)
100011101 //r3 = ~r3(j loop jump back to here)
010011110 //r3 = r3+1(-j)
010011111 //r3 = len(n)-j
101011100 //for j in range(i+2, len(n))
000000111 //r0 = 7
010111000 //r7 = 71
110011111 //r3 = mem[71](j)
010011110 //r3 = r3+1(j+1)
110011011 //r3 = n[j+1]
101011000 //if n[j+1]!=0
000000000 //r0 = 0(-n[j+1] LSB carry out=0)
011101000 //if n[j+1]==0
000000001 //r0 = 0(-n[j+1] LSB carry out=1)
110011111 //r3 = mem[71](j)
110011011 //r3 = n[j]
100011101 //r3 = ~r3(-n[j] without -n[j+1] LSB carry out)
010011000 //r3 = r3+r0(-n[j] with -n[j+1] LSB carry out)
010111110 //r7 = 72
111011111 //mem[72] = r3(-n[j] with -n[j+1] LSB carry out)
010111101 //r7 = 71
110011111 //r3 = mem[71](j)
010011110 //r3 = j+1
110011011 //r3 = n[j+1]
100011101 //r3 = ~r3
010011110 //r3 = r3+1(-n[j+1])
010111101 //r7 = 70
110010111 //r2 = mem[70](i)
010010110 //r2 = r2+1(i+1)
110010010 //r2 = n[i+1]
000000000 //r0 = 0
010000010 //r0 = r2
001000001 //r0 = r0>>1
010000000 //r0 = r0+r0
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-{n[i+1][7:1],0})
010000010 //r0 = r0+r2(n[i+1][0])
000100000 //r4 = 0
010100011 //r4 = r3
001100001 //r4 = r4>>1
010100100 //r4 = r4+r4
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-{-n[j+1][7:1],0})
010100011 //r4 = r4+r3(-n[j+1][0])
010000100 //r0 = r0+r4(n[i+1][0]-n[j+1][0])
001000001 //r0 >>= 1(r0 = n[i+1]-n[j+1] last bit carry out)
001010001 //r2 >>= 1
001011001 //r3 >>= 1
010000010 //r0 = r0+r2({0,n[i+1][7:1]}+last bit carry out)
010000011 //r0 = r0+r3({0,n[i+1][7:1]}+{0,-n[j+1][7:1]}+last bit carry out)
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1
001000001 //r0 >>=1(r0 = n[i+1]-n[j+1] LSB carry out)
110010111 //r2 = mem[70](i)
110010010 //r2 = n[i]
010111110 //r7 = 71
010111110 //r7 = 72
110011111 //r3 = mem[72](-n[j] with -n[j+1] LSB carry out)
010111101 //r7 = 71
010111101 //r7 = 70
010000010 //r0 = r0+r2(n[i+1]-n[j+1] LSB carry out+n[i])
010000011 //r0 = r0+r3(n[i+1]-n[j+1] LSB carry out+n[i]-n[j])
110010111 //r2 = mem[70](i)
010010110 //r2 = r2+1(i+1)
110010010 //r2 = n[i+1]
010111110 //r7 = 71
110011111 //r3 = mem[71](j)
010011110 //r3 = j+1
110011011 //r3 = n[j+1]
010111101 //r7 = 70
100011101 //r3 = ~r3
010011110 //r3 = r3+1(-n[j+1])
010010011 //r2 = r2+r3(n[i+1]-n[j+1])
010111110 //r7 = 71
000011100 //r3 = 4
100011101 //r3 = ~r3
010011110 //r3 = r3+1(-4)
010111011 //r7 = 67
110011111 //r3 = mem[67](minLSB)
100000101 //r0 = ~r0
011000001 //if r0(n[i+1]-n[j+1] LSB carry out+n[i]-n[j])<0
100010101 //r2 = ~r2
010010110 //r2 = r2+1(-(n[i+1]-n[j+1]))
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
011101000 //else
100000101 //r0 = ~r0
010111101 //r7 = 66
110001111 //r1 = mem[66](minMSB)
000011110 //r3 = 6
010111011 //r7 = 72
111010111 //mem[72] = r2(abs(n[i+1]-n[j+1]))
010111110 //r7 = 73
111000111 //mem[73] = r0(abs(n[i]-n[j]))
000100000 //r4 = 0
010100111 //r4 = 73
010100110 //r4 = 74(k)
100011101 //r3 = ~r3
010011110 //r3 = r3+1(-6)
010111011 //r7 = 67
110011111 //r3 = mem[67](minLSB)
010111101 //r7 = 66
100001101 //r1 = ~r
010001110 //r1 = r1+1(-minMSB)
010001000 //r1 = r0-minMSB
100001101 //r1 = ~r1
010001110 //r1 = r1+1(minMSB-r0)
101001010 //if abs(n[i]-n[j]) != minMSB{
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
011001001 //if abs(n[i]-n[j]) < minMSB{
111000111 //mem[66](minMSB) = r0(update minMSB)
010111110 //r7 = 67
111010111 //mem[67](minLSB) = r2(update minLSB)
010111101 //r7 = 66}
000110001 //nop
000110001 //nop
000110001 //nop
011101010 //}else if abs(n[i]-n[j]) == minMSB{
010111110 //r7 = 67
110011111 //r3 = minLSB
000000111 //r0 = 7(first k loop jump back to here)
010000111 //r0 = 74
000001111 //r1 = 7
010001110 //r1 = 8
010001001 //r1 = 16
010001000 //r1 = 74+16 = 90
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-90)
010001100 //r1 = k-90
101001001 //for k in range(16)(first k loop){
000000000 //r0 = 0
010000010 //r0 = abs(n[i+1]-n[j+1])
001000001 //r0 = r0/2
010000000 //r0 = r0+r0
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-{abs(n[i+1]-n[j+1])[15:1],0})
010000010 //r0 = r0+r2(abs(n[i+1]-n[j+1])[0])
111000100 //mem[k] = abs(n[i+1]-n[j+1])[0]
001010001 //r2 >>= 1
010100110 //k+=1
000000000 //r0 = 0
010000011 //r0 = minLSB
001000001 //r0 = r0/2
010000000 //r0 = r0+r0
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-{minLSB[15:1],0})
010000011 //r0 = r0+r3(minLSB[0])
111000100 //mem[k] = minLSB[0]
001011001 //r3 >>= 1
010100110 //k+=1
011101011 //jump back to first k loop}
000110001 //nop(second k loop jump back to here)
000110001 //nop
000110001 //nop
000110001 //nop
000001111 //r1 = 7
010001110 //r1 = 8
010001001 //r1 = 16
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-16)
010001000 //r1 = 90-16 = 74
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-74)
010001100 //r1 = k-74
101001011 //for k in range(16)(second k loop){
000010000 //r2 = 0
000011000 //r3 = 0
110010100 //r2 = mem[k](minLSB[7])
010100101 //k-=1
110011100 //r3 = mem[k](abs(n[i+1]-n[j+1])[7])
010100101 //k-=1
101010000 //if (minLSB[7]) == 1{
101011001 //if abs(n[i+1]-n[j+1])[7] == 1{
011101001 //}else if abs(n[i+1]-n[j+1][7]==0){
000110001 //nop
000001101 //r1 = 5
010001111 //r1 = 72
110001001 //r1 = mem[72](abs(n[i+1]-n[j+1]))
111001111 //mem[67] = abs(n[i+1]-n[j+1])(update minLSB)
011101000 //break}
000110001 //nop}
011101011 //jump back to second k loop}}
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
010111110 //r7 = 67
010111110 //r7 = 68
110001111 //r1 = mem[68](maxMSB)
010111110 //r7 = 69
110011111 //r3 = mem[69](maxLSB)
000000100 //r0 = 4
010000111 //r0 = 73
110000000 //r0 = mem[73](abs(n[i]-n[j]))
010111101 //r7 = 68
010111101 //r7 = 67
010111101 //r7 = 66
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-maxMSB)
010001000 //r1 = r0-maxMSB
101001010 //if abs(n[i]-n[j]) != maxMSB{
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
011001001 //if abs(n[i]-n[j]) < minMSB{
111000111 //mem[66](minMSB) = r0(update minMSB)
010111110 //r7 = 67
111010111 //mem[67](minLSB) = r2(update minLSB)
010111101 //r7 = 66}
000110001 //nop
000110001 //nop
000110001 //nop
011101010 //}else if abs(n[i]-n[j]) == minMSB{
010111110 //r7 = 67
110011111 //r3 = minLSB
000000111 //r0 = 7(first k loop jump back to here)
010000111 //r0 = 74
000001111 //r1 = 7
010001110 //r1 = 8
010001001 //r1 = 16
010001000 //r1 = 74+16 = 90
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-90)
010001100 //r1 = k-90
101001001 //for k in range(16)(first k loop){
000000000 //r0 = 0
010000010 //r0 = abs(n[i+1]-n[j+1])
001000001 //r0 = r0/2
010000000 //r0 = r0+r0
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-{abs(n[i+1]-n[j+1])[15:1],0})
010000010 //r0 = r0+r2(abs(n[i+1]-n[j+1])[0])
111000100 //mem[k] = abs(n[i+1]-n[j+1])[0]
001010001 //r2 >>= 1
010100110 //k+=1
000000000 //r0 = 0
010000011 //r0 = minLSB
001000001 //r0 = r0/2
010000000 //r0 = r0+r0
100000101 //r0 = ~r0
010000110 //r0 = r0+1(-{maxLSB[15:1],0})
010000011 //r0 = r0+r3(maxLSB[0])
111000100 //mem[k] = maxLSB[0]
001011001 //r3 >>= 1
010100110 //k+=1
011101011 //jump back to first k loop}
000110001 //nop(second k loop jump back to here)
000110001 //nop
000110001 //nop
000110001 //nop
000001111 //r1 = 7
010001110 //r1 = 8
010001001 //r1 = 16
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-16)
010001000 //r1 = 90-16 = 74
100001101 //r1 = ~r1
010001110 //r1 = r1+1(-74)
010001100 //r1 = k-74
101001011 //for k in range(16)(second k loop){
000010000 //r2 = 0
000011000 //r3 = 0
110010100 //r2 = mem[k](maxLSB[7])
010100101 //k-=1
110011100 //r3 = mem[k](abs(n[i+1]-n[j+1])[7])
010100101 //k-=1
101011000 //if abs(n[i+1]-n[j+1])[7] == 1{
101010001 //if maxLSB[7] == 1{
011101001 //}else if maxLSB[7]==0{
000110001 //nop
000001101 //r1 = 5
010001111 //r1 = 72
110001001 //r1 = mem[72](abs(n[i+1]-n[j+1]))
111001111 //mem[67] = abs(n[i+1]-n[j+1])(update minLSB)
011101000 //break}
000110001 //nop}
011101011 //jump back to second k loop}}
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000011100 //r3 = 4
010111011 //r7 = 71
110011111 //r3 = j
010011110 //j+=1
010011110 //j+=1
111011111 //mem[71] = j
000100111 //r4 = 7
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-7)
010111100 //r7 = 64
011101101 //jump back to j for loop
110010111 //r2 = i
010010110 //i+=1
010010110 //i+=1
111010111 //mem[70] = i
000100110 //r4 = 6
100100101 //r4 = ~r4
010100110 //r4 = r4+1(-6)
010111100 //r7 = 64
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
011101111 //jump back to i for loop
000000000 //r0 = 0
000001000 //r1 = 0
000010000 //r2 = 0
000011000 //r3 = 0
000100000 //r4 = 0
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
000110001 //nop
