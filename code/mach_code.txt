111111111 //mem[64] = 64(setup phase starts)
110001111 //r1 = 64
000000111 //r0 = 7
010000110 //r0 = 8
010000000 //r0 = 16
111000111 //min(mem[64]) = 16
010111110 //r7 = 65
111010111 //max(mem[65]) = 0
010111110 //r7 = 66
111001111 //mem[66] = 64
010111110 //r7 = 67
111010111 //mem[67] = r2(i=0)
010111110 //r7 = 68
111011111 //mem[68] = r3(j=0)
010111110 //r7 = 69
111011111 //mem[69] = r3(k=0)
010111101 //r7 = 68
010111101 //r7 = 67
010111101 //r7 = 66
010111101 //r7 = 65
010111101 //r7 = 64(setup phase ends)
010111110 //r7 = len(n)+1
010111110 //r7 = len(n)+2
010111110 //r7 = len(n)+3
110010111 //r2 = mem[67](i)
010111110 //r7 = len(n)+4
110011111 //r3 = mem[68](j)
110100010 //load mem[i] into r4
110000011 //load mem[j] into r0
100000100 //x(r0) = n[i]^n[j]
010111110 //r7 = len(n)+5
110100111 //r4 = mem[69](k)
010111110 //r7 = len(n)+6
111000111 //mem[70] = x(n[i]^n[j])
000011110 //r3 = 6
100011101 //r3 = ~r3
010011110 //r3 = -6
010111011 //r7 = len(n)
000011000 //r3 = 0(setBits)
100100101 //r4(k) = ~r4(first k loop jump back to here)
010100110 //r4 = r4+1(-k)
000001111 //r1 = 7
010001110 //r1 = 8
010100001 //r4 = 8 - k
101100010 //for k in range(8)(first k loop)
010111101 //r7 = len(n)+5
110100111 //r4 = k
010100110 //k+=1
111100111 //mem[69] = k
010111101 //r7 = len(n)+4
010111101 //r7 = len(n)+3
010111101 //r7 = len(n)+2
010111101 //r7 = len(n)+1
010111101 //r7 = len(n)
011110011 //jump back to first k loop