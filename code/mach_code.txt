111111111 //mem[64] = 64
110000111 //r0 = 64
110001111 //r1 = 64
111010111 //max(mem[64]) = 0
001000001 //r0 = 32
001000001 //r0 = 16
010111110 //r7 = 65
111000111 //min(mem[65]) = 16
010111110 //r7 = 66
111010111 //mem[66] = 0
010111110 //r7 = 67
111001111 //mem[67] = 64
010111110 //r7 = 68
111101111 //mem[68] = -1
010111110 //r7 = 69
111110111 //mem[69] = 1
010111110 //r7 = 68
010111110 //r7 = 67
010111110 //r7 = 66
010111110 //r7 = 65
010111110 //r7 = 64
110000111 //r0 = mem[64](0)
110001111 //r1 = mem[64](0)
110011111 //r3 = mem[64](0)
010011010 //load r3 with r2(i)
100011101 //r3 = ~r2
010011110 //r3 = r3+1(-r2)
010111101 //r7 = len(n)-1
010111101 //r7 = len(n)-2
010111101 //r7 = len(n)-3
010111101 //r7 = len(n)-4
010011111 //r3 = len(n)-4-i
010111110 //r7 = len(n)-3
010111110 //r7 = len(n)-2
010111110 //r7 = len(n)-1
010111110 //r7 = len(n)
101011110 //for i in range(len(n)-1)
010111110 //r7 = len(n)+1
010111110 //r7 = len(n)+2
110011111 //r3 = mem[66](0)
010011110 //r3 = 1
010011110 //r3 = 2
010011010 //r3(j) = r2(i)+2
110100111 //r4 = mem[66](0)
010100011 //load r4 with r3(j)
100100101 //r4 = ~r3
010100110 //r4 = r4+1(-r3)
010111101 //r7 = len(n)+1
010111101 //r7 = len(n)
010111101 //r7 = len(n)-1
010111101 //r7 = len(n)-2
010100111 //r4 = len(n)-2-j
010111110 //r7 = len(n)-1
010111110 //r7 = len(n)
101100100 //for j in range(i+2, len(n))
110100010 //load mem[i] into r4
110000011 //load mem[j] into r0
100100000 //x(r4) = n[i]^n[j]
010111110 //r7 = len(n)+1
010111110 //r7 = len(n)+2
110000111 //r0(k) = mem[66](0)
010111110 //r7 = len(n)+3
110001111 //r1 = mem[67](64)
010111110 //r7 = len(n)+4
010111110 //r7 = len(n)+5
010111110 //r7 = len(n)+6
111010111 //mem[70] = r2(i)
010111110 //r7 = len(n)+7
111011111 //mem[71] = r3(j)
001001001 //r1 = 32
001001001 //r1 = 16
010111101 //r7 = len(n)+6
010111101 //r7 = len(n)+5
010111101 //r7 = len(n)+4
010111101 //r7 = len(n)+3
010111101 //r7 = len(n)+2
110010111 //r2 = mem[66](0)
110011111 //r3 = mem[66](0)
010111101 //r7 = len(n)+1
010111101 //r7 = len(n)
010010000 //load r0(k) into r2
100010101 //r2 = ~r0
010010110 //r2 = r2+1(-r0)
010010001 //for k in range(r1(16))
010111110 //r7 = len(n)+1
010111110 //r7 = len(n)+2
101101011 //jump back to k loop
000011111 //r3 = 7
010111011 //r7 = len(n)+7
110011111 //r3 = j
010011110 //j+=1
010011110 //j+=1
111011111 //mem[71] = j
000011111 //r3 = 7
100011101 //r3 = ~r3
010011110 //r3 = -7
010111011 //r7 = len(n)
101101101 //jump back to j for loop
000010110 //r2 = 6
010111010 //r7 = len(n)+6
110010111 //r2 = i
010010110 //i+=1
010010110 //i+=1
111010111 //mem[70] = i
000010110 //r2 = 6
100010101 //r2 = ~r2
010010110 //r2 = -6
010111010 //r7 = len(n)
101101111 //jump back to i for loop